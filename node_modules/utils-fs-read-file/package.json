{
  "_args": [
    [
      {
        "raw": "utils-fs-read-file@^1.0.0",
        "scope": null,
        "escapedName": "utils-fs-read-file",
        "name": "utils-fs-read-file",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "D:\\meteor\\Echo1"
    ]
  ],
  "_from": "utils-fs-read-file@>=1.0.0 <2.0.0",
  "_id": "utils-fs-read-file@1.0.0",
  "_inCache": true,
  "_location": "/utils-fs-read-file",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "kgryte",
    "email": "kgryte@gmail.com"
  },
  "_npmVersion": "2.8.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "utils-fs-read-file@^1.0.0",
    "scope": null,
    "escapedName": "utils-fs-read-file",
    "name": "utils-fs-read-file",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/utils-fs-read-file/-/utils-fs-read-file-1.0.0.tgz",
  "_shasum": "8be132df4721d6913c6e5785ab880e9bc2362fa0",
  "_shrinkwrap": null,
  "_spec": "utils-fs-read-file@^1.0.0",
  "_where": "D:\\meteor\\Echo1",
  "author": {
    "name": "Athan Reines",
    "email": "kgryte@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/kgryte/utils-fs-read-file/issues"
  },
  "contributors": [
    {
      "name": "Athan Reines",
      "email": "kgryte@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "Reads the entire contents of a file.",
  "devDependencies": {
    "chai": "3.x.x",
    "codecov.io": "^0.1.5",
    "istanbul": "^0.3.0",
    "jshint": "2.x.x",
    "jshint-stylish": "2.x.x",
    "mocha": "2.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "8be132df4721d6913c6e5785ab880e9bc2362fa0",
    "tarball": "https://registry.npmjs.org/utils-fs-read-file/-/utils-fs-read-file-1.0.0.tgz"
  },
  "gitHead": "32f9780b89e939e20f3c6c297e0248867fe7b7ca",
  "homepage": "https://github.com/kgryte/utils-fs-read-file#readme",
  "keywords": [
    "utils",
    "utilities",
    "utility",
    "fs",
    "readFile",
    "readFileSync",
    "path",
    "async",
    "sync",
    "file",
    "read",
    "open",
    "filesystem"
  ],
  "license": "MIT",
  "main": "./lib",
  "maintainers": [
    {
      "name": "kgryte",
      "email": "kgryte@gmail.com"
    }
  ],
  "name": "utils-fs-read-file",
  "optionalDependencies": {},
  "readme": "Read File\n===\n[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][codecov-image]][codecov-url] [![Dependencies][dependencies-image]][dependencies-url]\n\n> Reads the entire contents of a file.\n\n\n## Installation\n\n``` bash\n$ npm install utils-fs-read-file\n```\n\n\n## Usage\n\n``` javascript\nvar readFile = require( 'utils-fs-read-file' );\n```\n\n#### readFile( path, [ options,] clbk )\n\nReads the entire contents of a file.\n\n``` javascript\nreadFile( __filename, onFile );\n\nfunction onFile( error, data ) {\n\tif ( error ) {\n\t\tconsole.error( error );\n\t} else {\n\t\tconsole.log( data );\n\t}\n}\n```\n\nThe function accepts the same options as [`fs.readFile()`](https://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback).\n\n\n#### readFile.sync( path[, options] )\n\nSynchronously reads the contents of an entire file.\n\n``` javascript\nvar out = readFile.sync( __filename );\nif ( out instanceof Error ) {\n\tthrow out;\n}\nconsole.log( out );\n```\n\nThe function accepts the same options as [`fs.readFileSync()`](https://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_options).\n\n\n## Notes\n\n*\tThe difference between this module and [`fs.readFileSync()`](https://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_options) is that [`fs.readFileSync()`](https://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_options)will throw if an `error` is encountered (e.g., if given a non-existent `path`) and this module will return an `error`. Hence, the following anti-pattern\n\n\t``` javascript\n\tvar fs = require( 'fs' );\n\n\tvar file = '/path/to/file.js';\n\n\t// Check for existence to prevent an error being thrown...\n\tif ( fs.existsSync( file ) ) {\n\t\tfile = fs.readFileSync( file );\n\t}\n\t```\n\n\tcan be replaced by an approach which addresses existence via `error` handling.\n\n\t``` javascript\n\tvar readFile = require( 'utils-fs-read-file' );\n\n\tvar file = '/path/to/file.js';\n\n\t// Explicitly handle the error...\n\tfile = readFile.sync( file );\n\tif ( file instanceof Error ) {\n\t\t// You choose what to do...\n\t\tthrow file;\n\t}\n\t```\n\n\n## Examples\n\n``` javascript\nvar readFile = require( 'utils-fs-read-file' );\n\n// Sync:\nvar file = readFile.sync( __filename, 'utf8' );\n// returns <string>\n\nconsole.log( file instanceof Error );\n// returns false\n\nfile = readFile.sync( 'beepboop', {\n\t'encoding': 'utf8'\n});\n// returns <error>\n\nconsole.log( file instanceof Error );\n// returns true\n\n\n// Async:\nreadFile( __filename, onFile );\nreadFile( 'beepboop', onFile );\n\nfunction onFile( error, data ) {\n\tif ( error ) {\n\t\tif ( error.code === 'ENOENT' ) {\n\t\t\tconsole.error( 'File does not exist.' );\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t} else {\n\t\tconsole.log( 'Success!' );\n\t}\n}\n```\n\nTo run the example code from the top-level application directory,\n\n``` bash\n$ node ./examples/index.js\n```\n\n\n## Tests\n\n### Unit\n\nUnit tests use the [Mocha](http://mochajs.org/) test framework with [Chai](http://chaijs.com) assertions. To run the tests, execute the following command in the top-level application directory:\n\n``` bash\n$ make test\n```\n\nAll new feature development should have corresponding unit tests to validate correct functionality.\n\n\n### Test Coverage\n\nThis repository uses [Istanbul](https://github.com/gotwarlost/istanbul) as its code coverage tool. To generate a test coverage report, execute the following command in the top-level application directory:\n\n``` bash\n$ make test-cov\n```\n\nIstanbul creates a `./reports/coverage` directory. To access an HTML version of the report,\n\n``` bash\n$ make view-cov\n```\n\n\n---\n## License\n\n[MIT license](http://opensource.org/licenses/MIT).\n\n\n## Copyright\n\nCopyright &copy; 2015. Athan Reines.\n\n\n[npm-image]: http://img.shields.io/npm/v/utils-fs-read-file.svg\n[npm-url]: https://npmjs.org/package/utils-fs-read-file\n\n[travis-image]: http://img.shields.io/travis/kgryte/utils-fs-read-file/master.svg\n[travis-url]: https://travis-ci.org/kgryte/utils-fs-read-file\n\n[codecov-image]: https://img.shields.io/codecov/c/github/kgryte/utils-fs-read-file/master.svg\n[codecov-url]: https://codecov.io/github/kgryte/utils-fs-read-file?branch=master\n\n[dependencies-image]: http://img.shields.io/david/kgryte/utils-fs-read-file.svg\n[dependencies-url]: https://david-dm.org/kgryte/utils-fs-read-file\n\n[dev-dependencies-image]: http://img.shields.io/david/dev/kgryte/utils-fs-read-file.svg\n[dev-dependencies-url]: https://david-dm.org/dev/kgryte/utils-fs-read-file\n\n[github-issues-image]: http://img.shields.io/github/issues/kgryte/utils-fs-read-file.svg\n[github-issues-url]: https://github.com/kgryte/utils-fs-read-file/issues\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/kgryte/utils-fs-read-file.git"
  },
  "scripts": {
    "codecov": "istanbul cover ./node_modules/.bin/_mocha --dir ./reports/codecov/coverage --report lcovonly -- -R spec && cat ./reports/codecov/coverage/lcov.info | codecov && rm -rf ./reports/codecov",
    "test": "mocha",
    "test-cov": "istanbul cover ./node_modules/.bin/_mocha --dir ./reports/coverage -- -R spec"
  },
  "version": "1.0.0"
}
